
---
Description: Set up Cognito pool

Parameters:
  NamePrefix:
    Type: String
    Description: prefix for naming all components
    MinLength: 3
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
  UserPoolId:
    Type: String
    MinLength: 3
  ServiceRoleArn:
    Type: String
    MinLength: 3
  QuestionnaireTableName:
    Type: String
    MinLength: 3
  QuestionTableName:
    Type: String
    MinLength: 3

Resources:
  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Description: "The GraphQL API for the Questionnaires App"
    Properties:
      AuthenticationType: "AMAZON_COGNITO_USER_POOLS"
      Name: !Sub ${NamePrefix}
      UserPoolConfig:
        UserPoolId: !Ref UserPoolId
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: "ALLOW"
  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Questionnaire {
          id: ID!
          name: String
          questions: QuestionConnection
        }
        type QuestionConnection {
          items: [Question]
        }
        type Questionnaires {
          questionnaires: [Questionnaire!]!
        }
        type Question {
          id: ID!
          questionnaireId: ID!
          question: String
        }
        type Questions {
          questions: [Question!]!
        }
        type Query {
          getQuestions: Questions!
          getQuestion(id: ID!): Question
          getQuestionnaires: Questionnaires!
          getQuestionnaire(id: ID!): Questionnaire
        }
        type Mutation {
          saveQuestion(questionnaireId: ID!, question: String!): Question
          saveQuestionnaire(name: String!): Questionnaire
          deleteQuestion(id: ID!): Question
          deleteQuestionnaire(id: ID!): Questionnaire
        }
        type Schema {
          query: Query
          mutation: Mutation
        }
  AppSyncQuestionnairesTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${NamePrefix}_questionnaires
      Description: "The Questionnaires Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !Ref ServiceRoleArn
      DynamoDBConfig:
        TableName: !Ref QuestionnaireTableName
        AwsRegion: !Sub ${AWS::Region}

  AppSyncQuestionsTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${NamePrefix}_questions
      Description: "The Questions Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !Ref ServiceRoleArn
      DynamoDBConfig:
        TableName: !Ref QuestionTableName
        AwsRegion: !Sub ${AWS::Region}


  AppSyncAllQuestionnairesQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getQuestionnaires
      DataSourceName: !GetAtt AppSyncQuestionnairesTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation" : "Query",
          "index" : "UserId-index",
          "query" : {
             "expression": "UserId = :userid",
             "expressionValues" : {
                ":userid" : $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
              }
           }
        }
      ResponseMappingTemplate: |
        {
          "questionnaires": $util.toJson($ctx.result.items)
        }
  AppSyncGetQuestionnaireQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getQuestionnaire
      DataSourceName: !GetAtt AppSyncQuestionnairesTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  AppSyncSaveQuestionnaireMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: saveQuestionnaire
      DataSourceName: !GetAtt AppSyncQuestionnairesTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  AppSyncDeleteQuestionnaireMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteQuestionnaire
      DataSourceName: !GetAtt AppSyncQuestionnairesTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  AppSyncGetQuestionsQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getQuestions
      DataSourceName: !GetAtt AppSyncQuestionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation" : "Query",
          "index" : "UserId-index",
          "query" : {
             "expression": "UserId = :userid",
             "expressionValues" : {
                ":userid" : $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
              }
           }
        }
      ResponseMappingTemplate: |
        {
          "questions": $util.toJson($ctx.result.items)
        }

  AppSyncQuestionConnectionQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Questionnaire
      FieldName: questions
      DataSourceName: !GetAtt AppSyncQuestionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "index": "QuestionnaireIdGSI",
          "query": {
              "expression": "questionnaireId = :questionnaireId",
              "expressionValues": {
                  ":questionnaireId": {
                      "S": "$context.source.id"
                  }
              }
           }
        }
      ResponseMappingTemplate: |
        {
          "items": $util.toJson($context.result.items)
        }

  AppSyncSaveQuestionMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: saveQuestion
      DataSourceName: !GetAtt AppSyncQuestionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          },
          "attributeValues": {
            "questionnaireId": $util.dynamodb.toDynamoDBJson($ctx.args.questionnaireId),
            "question": $util.dynamodb.toDynamoDBJson($ctx.args.question)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  AppSyncGetQuestionQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getQuestion
      DataSourceName: !GetAtt AppSyncQuestionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  AppSyncDeleteQuestionMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteQuestion
      DataSourceName: !GetAtt AppSyncQuestionsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            "UserId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

Outputs:
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId
